language: node_js

node_js:
- "node"

sudo: required

cache:
  directories:
    - node_modules
    - "$HOME/google-cloud-sdk"

services:
  - postgresql
  - docker

addons:
  postgresql: "9.6"
  hosts:
    - postgres.truesparrow

env:
  global:
  - PATH=$PATH:${HOME}/google-cloud-sdk/bin
  - PGSSLMODE=require
  - GEMFURY_USER=truesparrow
  # GEMFURY_API_KEY=???
  - secure: "Ysbvoo72qw5Sfh5rNaVWN0y5pj62tRbxwB3Ayt4/Z117TH7RaQeGVLZvlbi70xZESL1/pPEmzgE6gh7i8edtFTJyLevoxhsOvBICM/MstwbkAOqIq7wzbKUorGwwrJoYfp9oz+A8Pl9DTBu8wp5qG/mpAWE5sIdwUNwEjhaqr0xWfm5313FWUDkeQLxQESHudDryFMxRrJy41sRLgst2Tkq8OmBZEqatl5SaEWtMnOCpVqeRaxQVzOrzdCIRdNPUC95XihIAtAl5oqncUa7yOKYR7sovTmP03xuHgZjQ9MEEe5xu1JVoYQdln6w3SaANjc7isyqb9KGB7OXte4NlwfivsHQNGwXEZSSxKJQNmhE5VXg9RT8HA6MnkZxeFgp5y4LU0u00S/g0X7RTk5n9lEOEV9qBGFEPNIKUkZNVt+HhvkV2GPR4O6yo+2yNJil4cvNQmf6RGPOg078IqQHmBBOFEkz0cBtsOJONMweZZlSCLmryxahr1HdvHGIynleiJ4+EX+aTLJA1dtlH0j0mX64u4P2q4W3DHvXZv4b7hRHZ/NuWjnq71b5PCkEF+cDuwidYTK1vtQuAd4fXfpMCPS5/h83/NJMdJUbYq/jxg8J71ndQF7ja7hH9PFGmTzKisOeLEtDDfoFvKTQtsy6U2NUeYkPjOmHIOxqoEkI8MMY="
  - GCP_STAGING_PROJECT=chmsqrt2-truesparrow-staging
  - GCP_STAGING_ZONE=europe-west1-b
  - CLOUDSDK_CORE_DISABLE_PROMPTS=1
  - GOOGLE_APPLICATION_CREDENTIALS=config/gcp-ci-builder-key.json

before_install:
- if [ ! -d ${HOME}/google-cloud-sdk/bin ]; then
    rm -rf ${HOME}/google-cloud-sdk;
    curl https://sdk.cloud.google.com | bash /dev/stdin --disable-prompts;
    ${HOME}/google-cloud-sdk/bin/gcloud -q components update kubectl;
  fi
- source ${HOME}/google-cloud-sdk/path.bash.inc

install:
- npm install --registry=https://npm-proxy.fury.io/${GEMFURY_API_KEY}/${GEMFURY_USER}/ --progress=false

before_script:
- psql -c "create database truesparrow;" -U postgres
- psql -c "create user truesparrow with password 'truesparrow';" -U postgres
- psql -c "grant all on database truesparrow to truesparrow;" -U postgres
- openssl aes-256-cbc -K $encrypted_cc8365da97ab_key -iv $encrypted_cc8365da97ab_iv -in secrets.tar.enc -out secrets.tar -d
- tar xvf secrets.tar

script:
- npm run test

after_success:
- npm run push-coverage-to-codecov
- echo $TRAVIS_TAG

# deploy:
# - provider: script
#   skip_cleanup: true
#   script: $(npm bin)/togemfury --user ${GEMFURY_USER} --api_key ${GEMFURY_API_KEY}
#   on:
#     tags: true
# - provider: script
#   skip_cleanup: true
#   script:
#     cat ${GOOGLE_APPLICATION_CREDENTIALS} | docker login --username _json_key --password-stdin https://eu.gcr.io;
#     docker build --tag eu.gcr.io/chmsqrt2-truesparrow-common/identity:$TRAVIS_TAG .;
#     docker push eu.gcr.io/chmsqrt2-truesparrow-common/identity:$TRAVIS_TAG;
#     docker build --tag eu.gcr.io/chmsqrt2-truesparrow-common/identity:latest .;
#     docker push eu.gcr.io/chmsqrt2-truesparrow-common/identity:latest
#   on:
#     tags: true
# - provider: script
#   skip_cleanup: true
#   script:
#     ${HOME}/google-cloud-sdk/bin/gcloud config set project $GCP_STAGING_PROJECT;
#     ${HOME}/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS};
#     ${HOME}/google-cloud-sdk/bin/gcloud container clusters get-credentials chmsqrt2-truesparrow-staging-cluster --zone ${GCP_STAGING_ZONE};
#     kubectl apply -f k8s-service.yaml --record;
#     kubectl apply -f k8s-deployment.yaml --record;
#     kubectl set image deployment/identity identity=eu.gcr.io/chmsqrt2-truesparrow-common/identity:$TRAVIS_TAG
#   on:
#     tags: true
